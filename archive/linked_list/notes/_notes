

Array = Continuous locations

Node

Value + pointer


Linear data structure, collection of elements stored in known locations

Linekd list = elements are linked





Singly linked list
    Each node contains 2 parts -> data, address.
    Data and pointer to successor node
    head node is a pointer only

    Representation

Doubly Linked list
    Each node contains 3 parts -> data, 2 address, 1 address to the next link, one to the previous




Circular linkedlist:
    each node
    sing link list + last element has link to first element
    Last node will have address of first node


doubly circular linkedlist:






Array vs Linkedlist
    Operaiton frequently
    many factors

Cost of accessing an element
    O(1) -> O(n)

Memory requirement:
    array is fixed size
    Memory utilization is not dynamic, space waste. ineffecient
    Memory requirement is less in array, more in linkedlist, when creation of it

Cost of insertion:
Array:
    at beginning: O(n)
    at end: O(1)
    at nth position: proportional size. O(n) - p. p is potition of element

Array:
    at beginning: O(1)
    at end: O(n), traverse complete list
    at nth position: proportional size. O(n) - p. p is potition of element

Searching:
    Array: linear and binary
    LL: linear



- Creation of linkedlist in python

- Creation of linkedlist in python

class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

# Create a LinkedList class


class LinkedList:
	def __init__(self):
		self.head = None

- # create a new linked list
llist = LinkedList()



- Insert a node at the begin


# Create a Node class to create a node
class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

# Create a LinkedList class
	# Method to add a node at begin of LL
	def insertAtBegin(self, data):
		new_node = Node(data)
		if self.head is None:
			self.head = new_node
			return
		else:
			new_node.next = self.head
			self.head = new_node


# Add node at any index
# Method to add a node at any index
# Indexing starts from 0.
def insertAtIndex(self, data, index):
    new_node = Node(data)
    current_node = self.head
    position = 0
    if position == index:
        self.insertAtBegin(data)
    else:
        while(current_node != None and position+1 != index):
            position = position+1
            current_node = current_node.next

        if current_node != None:
            new_node.next = current_node.next
            current_node.next = new_node
        else:
            print("Index not present")


# Insert node at end:
def insertAtEnd(self, data):
    new_node = Node(data)
    if self.head is None:
        self.head = new_node
        return

    current_node = self.head
    while(current_node.next):
        current_node = current_node.next

    current_node.next = new_node


# Update node:
# Update node of a linked list
    # at given position
def updateNode(self, val, index):
    current_node = self.head
    position = 0
    if position == index:
        current_node.data = val
    else:
        while(current_node != None and position != index):
            position = position+1
            current_node = current_node.next

        if current_node != None:
            current_node.data = val
        else:
            print("Index not present")


- Remove:
	def remove_first_node(self):
		if(self.head == None):
			return

		self.head = self.head.next

	# Method to remove last node of linked list
	def remove_last_node(self):

		if self.head is None:
			return

		current_node = self.head
		while(current_node.next.next):
			current_node = current_node.next

		current_node.next = None

	# Method to remove at given index
	def remove_at_index(self, index):
		if self.head == None:
			return

		current_node = self.head
		position = 0
		if position == index:
			self.remove_first_node()
		else:
			while(current_node != None and position+1 != index):
				position = position+1
				current_node = current_node.next

			if current_node != None:
				current_node.next = current_node.next.next
			else:
				print("Index not present")

	# Method to remove a node from linked list
	def remove_node(self, data):
		current_node = self.head

		if current_node.data == data:
			self.remove_first_node()
			return

		while(current_node != None and current_node.next.data != data):
			current_node = current_node.next

		if current_node == None:
			return
		else:
			current_node.next = current_node.next.next



- Size and traversal:
	# Print the size of linked list
	def sizeOfLL(self):
		size = 0
		if(self.head):
			current_node = self.head
			while(current_node):
				size = size+1
				current_node = current_node.next
			return size
		else:
			return 0

	# print method for the linked list
	def printLL(self):
		current_node = self.head
		while(current_node):
			print(current_node.data)
			current_node = current_node.next





class LinkedList:
	def __init__(self):
		self.head = None

	# Method to add a node at begin of LL
	def insertAtBegin(self, data):
		new_node = Node(data)
		if self.head is None:
			self.head = new_node
			return
		else:
			new_node.next = self.head
			self.head = new_node

	# Method to add a node at any index
	# Indexing starts from 0.
	def insertAtIndex(self, data, index):
		new_node = Node(data)
		current_node = self.head
		position = 0
		if position == index:
			self.insertAtBegin(data)
		else:
			while(current_node != None and position+1 != index):
				position = position+1
				current_node = current_node.next

			if current_node != None:
				new_node.next = current_node.next
				current_node.next = new_node
			else:
				print("Index not present")

	- # Method to add a node at the end of LL

	def insertAtEnd(self, data):
		new_node = Node(data)
		if self.head is None:
			self.head = new_node
			return

		current_node = self.head
		while(current_node.next):
			current_node = current_node.next

		current_node.next = new_node

	# Update node of a linked list
		# at given position
	def updateNode(self, val, index):
		current_node = self.head
		position = 0
		if position == index:
			current_node.data = val
		else:
			while(current_node != None and position != index):
				position = position+1
				current_node = current_node.next

			if current_node != None:
				current_node.data = val
			else:
				print("Index not present")


	# Method to remove first node of linked list

	def remove_first_node(self):
		if(self.head == None):
			return

		self.head = self.head.next

	# Method to remove last node of linked list
	def remove_last_node(self):

		if self.head is None:
			return

		current_node = self.head
		while(current_node.next.next):
			current_node = current_node.next

		current_node.next = None

	# Method to remove at given index
	def remove_at_index(self, index):
		if self.head == None:
			return

		current_node = self.head
		position = 0
		if position == index:
			self.remove_first_node()
		else:
			while(current_node != None and position+1 != index):
				position = position+1
				current_node = current_node.next

			if current_node != None:
				current_node.next = current_node.next.next
			else:
				print("Index not present")

	# Method to remove a node from linked list
	def remove_node(self, data):
		current_node = self.head

		if current_node.data == data:
			self.remove_first_node()
			return

		while(current_node != None and current_node.next.data != data):
			current_node = current_node.next

		if current_node == None:
			return
		else:
			current_node.next = current_node.next.next

	# Print the size of linked list
	def sizeOfLL(self):
		size = 0
		if(self.head):
			current_node = self.head
			while(current_node):
				size = size+1
				current_node = current_node.next
			return size
		else:
			return 0

	# print method for the linked list
	def printLL(self):
		current_node = self.head
		while(current_node):
			print(current_node.data)
			current_node = current_node.next


# create a new linked list
llist = LinkedList()

# add nodes to the linked list
llist.insertAtEnd('a')
llist.insertAtEnd('b')
llist.insertAtBegin('c')
llist.insertAtEnd('d')
llist.insertAtIndex('g', 2)

# print the linked list
print("Node Data")
llist.printLL()

# remove a nodes from the linked list
print("\nRemove First Node")
llist.remove_first_node()
print("Remove Last Node")
llist.remove_last_node()
print("Remove Node at Index 1")
llist.remove_at_index(1)


# print the linked list again
print("\nLinked list after removing a node:")
llist.printLL()

print("\nUpdate node Value")
llist.updateNode('z', 0)
llist.printLL()

print("\nSize of linked list :", end=" ")
print(llist.sizeOfLL())




- Creation of linkedlist
- Insertion of node in linkedlist
- Deletion of node from linkedlist
- Find length of linkedlist
- Reverse a linkedlist
- Leetcode questions





















