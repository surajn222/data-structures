@startuml
!pragma layout smetana
allow_mixing


top to bottom direction

card Operations [
    1. Creation
    2. Insertion
        1. Insertion at beginning
        2. Insertion at end
        3. Insertion at position
    3. Update
    4. Removal/Delete
]

card Creation[
    Creation
]

card Insertion[
    Insertion
]

card Removal[
    1. Removal from beginning
    2. Removal from end
    3. Removal from index
]

card Creation1[
- Creation of linkedlist in python
==============
Visual rep:
    LL(Head -> Node1(data,address -> Node2(data,address) -> Node3(data,address)))

    Node(data,None)
    LinkedList(head)
==============

class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

class LinkedList:
	def __init__(self):
		self.head = None

- # create a new linked list
llist = LinkedList()

]


card Insertion_begin[
1. Insertion at beginning

===============
Two possible scenarios:
    LL(head -> Node_new(data,address))
    LL(head -> Node_new(data,address -> Node_old(data,address)))
===============


# Create a Node class to create a node
class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

# Create a LinkedList class
	# Method to add a node at begin of LL
	def insertAtBegin(self, data):
		new_node = Node(data)
		if self.head is None:
			self.head = new_node
			return
		else:
			new_node.next = self.head
			self.head = new_node

]

card Insertion_index[
3. Insertion at any node

    def insertAtIndex(self, data, index):
        new_node = Node(data)
        current_node = self.head
        position = 0
        if position == index:
            self.insertAtBegin(data)
        else:
            while(current_node != None and position+1 != index):
                position = position+1
                current_node = current_node.next

            if current_node != None:
                new_node.next = current_node.next
                current_node.next = new_node
            else:
                print("Index not present")

]

card Insertion_end [
2. Insertion at end

============

LL(head -> Node_new(data, node)
LL(head -> Node1(data, node -> Node_new(data, node)))

============

def insertAtEnd(self, data):
    new_node = Node(data)
    if self.head is None:
        self.head = new_node
        return

    current_node = self.head
    while(current_node.next):
        current_node = current_node.next

    current_node.next = new_node
]



card traversal [
- Size and traversal:
========
    LL(Head -> Node1(data,address -> Node2(data,address) -> Node3(data,address)))
========

	# print method for the linked list
	def printLL(self):
		current_node = self.head
		while(current_node):
			print(current_node.data)
			current_node = current_node.next

	# Print the size of linked list
	def sizeOfLL(self):
		size = 0
		if(self.head):
			current_node = self.head
			while(current_node):
				size = size+1
				current_node = current_node.next
			return size
		else:
			return 0
]


card Removal_first[
1. Removal from beginning
    def remove_first_node(self):
        if(self.head == None):
            return

        self.head = self.head.next
]

card Removal_last [
2. Removal from end

	# Method to remove last node of linked list
	def remove_last_node(self):
		if self.head is None:
			return

		current_node = self.head
		while(current_node.next.next):
			current_node = current_node.next

		current_node.next = None
]


card Removal_index[
2. Removal from index
	# Method to remove at given index
	def remove_at_index(self, index):
		if self.head == None:
			return

		current_node = self.head
		position = 0
		if position == index:
			self.remove_first_node()
		else:
			while(current_node != None and position+1 != index):
				position = position+1
				current_node = current_node.next

			if current_node != None:
				current_node.next = current_node.next.next
			else:
				print("Index not present")

	# Method to remove a node from linked list
	def remove_node(self, data):
		current_node = self.head

		if current_node.data == data:
			self.remove_first_node()
			return

		while(current_node != None and current_node.next.data != data):
			current_node = current_node.next

		if current_node == None:
			return
		else:
			current_node.next = current_node.next.next

]

card Update [
- Update node:
    # Update node of a linked list at given position

    def updateNode(self, val, index):
        current_node = self.head
        position = 0
        if position == index:
            current_node.data = val
        else:
            while(current_node != None and position != index):
                position = position+1
                current_node = current_node.next

            if current_node != None:
                current_node.data = val
            else:
                print("Index not present")

]

Operations -up-> Creation
Operations -right-> Insertion
Operations -down-> Removal
Operations -down-> Update

Creation -> Creation1
Insertion -right-> Insertion_begin
Insertion -right-> Insertion_index
Insertion -right-> Insertion_end

Operations -left-> traversal

Removal -left-> Removal_first
Removal -down-> Removal_last
Removal -right-> Removal_index

@enduml


