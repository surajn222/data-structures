list_files = \
	[
		["determine_whether_two_strings_are_anagram_or_not", "anagram"],
		["group_anagrams_together_from_a_list_of_words", "anagram"],
		["find_all_n-digit_binary_numbers_with_an_equal_sum_of_bits_in_their_two_halves", "binary"],
		["find_all_n-digit_binary_numbers_having_more_1\xe2\x80\x99s_than_0\xe2\x80\x99s_for_any_prefix", "binary"],
		["generate_binary_numbers_between_1_to_`n`_using_a_queue", "binary"],
		["find_all_n-digit_binary_numbers_with_k-bits_set_where_`k`_ranges_from_1_to_`n`", "binary"],
		["find_all_binary_strings_that_can_be_formed_from_a_wildcard_pattern", "binary"],
		["print_all_combinations_of_phrases_formed_by_picking_words_from_each_of_the_given_lists", "combinations"],
		["find_all_lexicographic_permutations_of_a_string", "combinations"],
		["find_all_permutations_of_a_string_in_python", "combinations"],
		["break_a_string_into_all_possible_combinations_of_non-overlapping_substrings", "combinations"],
		["iterative_approach_to_finding_permutations_of_a_string", "combinations"],
		["generate_all_permutations_of_a_string_in_java_\xe2\x80\x93_recursive_and_iterative", "combinations"],
		["find_all_lexicographically_next_permutations_of_a_string", "combinations"],
		["find_all_permutations_of_a_string_in_c++_(using_backtracking_and_stl)", "combinations"],
		["find_all_possible_combinations_by_replacing_given_digits_with_characters_of_the_corresponding_list",
		 "combinations"],
		["find_all_possible_combinations_of_words_formed_from_the_mobile_keypad", "combinations"],
		["implement_diff_utility", "difference"],
		["find_the_first_non-repeating_character_in_a_string_by_doing_only_one_traversal_of_it", "duplicate"],
		["remove_all_adjacent_duplicates_from_a_string", "duplicate"],
		["find_first_`k`_non-repeating_characters_in_a_string_in_a_single_traversal", "duplicate"],
		["find_duplicate_parenthesis_in_an_expression", "duplicate"],
		["remove_adjacent_duplicate_characters_from_a_string", "duplicates"],
		["evaluate_a_postfix_expression", "fix"],
		["find_first_`k`_maximum_occurring_words_in_a_given_set_of_strings", "occurring"],
		["find_the_maximum_occurring_word_in_a_given_set_of_strings", "occurring"],
		["find_all_occurrences_of_the_given_string_in_a_character_matrix", "occurring"],
		["determine_whether_characters_of_a_string_follow_a_specific_order", "order"],
		["find_all_words_that_follow_the_same_order_of_characters_as_given_pattern", "order"],
		["check_if_a_sentence_is_syntactically_correct_or_not", "order"],
		["find_minimum_cuts_needed_for_the_palindromic_partition_of_a_string", "palindrome"],
		["check_if_a_string_is_k\xe2\x80\x93palindrome_or_not", "palindrome"],
		["longest_palindromic_subsequence_using_dynamic_programming", "palindrome"],
		["find_all_palindromic_permutations_of_a_string", "palindrome"],
		["find_the_longest_even-length_palindromic_sum_substring_of_a_string", "palindrome"],
		["find_all_possible_palindromic_substrings_of_a_string", "palindrome"],
		["determine_whether_a_string_is_a_palindrome_or_not", "palindrome"],
		["check_if_a_string_matches_with_the_given_wildcard_pattern", "pattern"],
		["determine_whether_a_string_matches_with_a_given_pattern", "pattern"],
		["find_all_words_matching_a_pattern_in_the_given_dictionary", "pattern"],
		["wildcard_pattern_matching", "pattern"],
		["count_the_number_of_times_a_pattern_appears_in_a_given_string_as_a_subsequence", "pattern"],
		["introduction_to_pattern_matching", "pattern"],
		["word_break_problem_\xe2\x80\x93_using_trie_data_structure", "problem"],
		["word_break_problem_\xe2\x80\x93_dynamic_programming", "problem"],
		["the_levenshtein_distance_(edit_distance)_problem", "problem"],
		["find_the_minimum_number_of_inversions_needed_to_make_an_expression_balanced", "rearrange"],
		["find_minimum_operations_required_to_transform_a_string_into_another_string", "rearrange"],
		["determine_whether_a_string_can_be_transformed_into_another_string_in_a_single_edit", "rearrange"],
		["find_the_minimum_number_possible_by_doing_at-most_`k`_swaps", "rearrange"],
		["number_to_word_conversion_\xe2\x80\x93_c++,_java_and_python", "rearrange"],
		["decode_a_given_sequence_to_construct_a_minimum_number_without_repeated_digits", "rearrange"],
		["print_string_in_the_zigzag_form_in_`k`_rows", "rearrange"],
		["remove_all_extra_spaces_from_a_string", "rearrange"],
		["reverse_text_without_reversing_individual_words", "reverse"],
		["recursive_program_to_print_reverse_of_a_string", "reverse"],
		["reverse_a_string_using_recursion_\xe2\x80\x93_c,_c++,_and_java", "reverse"],
		["iterative_solution_to_reverse_a_string_in_c++_and_java", "reverse"],
		["lexicographically_minimal_string_rotation", "rotate"],
		["check_if_strings_can_be_derived_from_each_other_by_circularly_rotating_them", "rotate"],
		["check_if_a_string_is_a_rotated_palindrome_or_not", "rotate"],
		["check_if_a_set_of_moves_is_circular_or_not", "rotate"],
		["find_the_length_of_the_longest_balanced_parenthesis_in_a_string", "sub"],
		["longest_common_subsequence_of_k\xe2\x80\x93sequences", "sub"],
		["find_all_n-digit_strictly_increasing_numbers_(bottom-up_and_top-down_approach)", "sub"],
		["longest_common_prefix_in_a_given_set_of_strings_(using_trie)", "sub"],
		["shortest_common_supersequence_|_finding_all_scs", "sub"],
		["shortest_common_supersequence_problem", "sub"],
		["longest_repeated_subsequence_problem", "sub"],
		["longest_common_substring_problem", "sub"],
		["longest_common_subsequence_|_finding_all_lcs", "sub"],
		["longest_common_subsequence_(lcs)_|_space_optimized_version", "sub"],
		["longest_common_subsequence_problem", "sub"],
		["find_all_combinations_of_non-overlapping_substrings_of_a_string", "sub"],
		["find_the_longest_substring_of_a_string_containing_distinct_characters", "sub"],
		["find_all_substrings_of_a_string_that_are_a_permutation_of_another_string", "sub"],
		["find_the_longest_substring_of_a_string_containing_`k`_distinct_characters", "sub"],
		["check_if_a_repeated_subsequence_is_present_in_a_string_or_not", "sub"],
		["longest_palindromic_substring_problem", "sub"],
		["shortest_superstring_problem", "sub"],
		["difference_between_subarray,_subsequence,_and_subset", "sub"],
		["lexicographic_rank_of_a_string", "type"],
		["isomorphic_strings", "type"]
	]

for i in list_files:
	print(i[0])
	print(i[1])

	# os.mkdir("../strings/strings_questions/" + str(i))
	f = open("../strings/strings_questions/" + str(i[1]) + "/" + str(i[0]) + ".py", "w")
	f.close()
